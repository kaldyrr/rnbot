#py 3.13.0
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import nltk
from nltk.tokenize import word_tokenize
from rapidfuzz import process
from transliterate import translit
'''import openai
openai.api_key = "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"
'''
nltk.data.path.append(r'C:\Users\vadim\AppData\Roaming\nltk_data')
nltk.download('punkt')
API_TOKEN = '7908700715:AAHtgQnR0HmmRIo-kRMfHkox1-SloNkqMFc'
bot = telebot.TeleBot(API_TOKEN)
SHEET_NAME = 'Rn'
CREDENTIALS_FILE = 'credentials.json'
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(credentials)
sheet = client.open(SHEET_NAME).sheet1 
rows = sheet.get_all_values()
product_data = []
for row in rows[1:]:
    product_data.append({
        "product_name": row[0].strip().lower(),  
        "stock": int(row[1]) if row[1].isdigit() else 0, 
        "price": row[2] if len(row) > 2 else None 
    })

'''@bot.message_handler(commands=['get_chat_id'])
def send_chat_id(message):
    user_id = message.chat.id
    bot.send_message(user_id, f"–í–∞—à chat_id: {user_id}")'''

'''
"""                                –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø AI                              """


def query_openai(prompt, model="gpt-3.5-turbo"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[{"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä–∞–º."},
                      {"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=100
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å OpenAI API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

# –ü—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
def handle_user_query_with_openai(user_input):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    prompt = f"""
    –£ –º–µ–Ω—è –µ—Å—Ç—å –±–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤. –Ø –∏—â—É —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É: "{user_input}".
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –±–∞–∑—ã: 
    - –¢–æ–≤–∞—Ä: Kasta –°–º–æ—Ä–æ–¥–∏–Ω–∞ , –¶–µ–Ω–∞: 500, –û—Å—Ç–∞—Ç–æ–∫: 1555
    - –¢–æ–≤–∞—Ä: Iceberg –î—ã–Ω—è –ú–∞–ª–∏–Ω–∞ , –¶–µ–Ω–∞: 800, –û—Å—Ç–∞—Ç–æ–∫: 15
    """
    return query_openai(prompt)

def get_relevant_products_from_ai(user_input):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    product_list = "\n".join([f"- –¢–æ–≤–∞—Ä: {p['product_name']}, –¶–µ–Ω–∞: {p['price']}, –û—Å—Ç–∞—Ç–æ–∫: {p['stock']}" for p in product_data])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è OpenAI
    prompt = f"""
    –£ –º–µ–Ω—è –µ—Å—Ç—å –±–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤:
    {product_list}

    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç: "{user_input}".
    –ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã.
    """
    return query_openai(prompt)

@bot.message_handler(func=lambda message: True)
def process_order_with_ai_and_db(message):
    user_input = message.text
    user_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ OpenAI
    ai_response = get_relevant_products_from_ai(user_input)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.send_message(user_id, f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —è –Ω–∞—à–µ–ª:\n\n{ai_response}")


@bot.message_handler(func=lambda message: True)
def process_order_with_openai(message):
    user_input = message.text
    user_id = message.chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
    ai_response = handle_user_query_with_openai(user_input)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_id, f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:\n\n{ai_response}")


"""                                –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø AI3                             """
'''
#–ú–µ–Ω—é
def send_main_menu(user_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥"),
        KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞")
    )
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

#–≥—Ä—É–∑–∏–º –∫–∞—Ç–∞–ª–æ–≥
def get_catalog():
    catalog = {}
    for product in product_data:
        category = product['product_name'].split()[0]
        if category not in catalog:
            catalog[category] = []
        catalog[category].append(product)
    return catalog

def send_categories(user_id, message_id=None):
    catalog = get_catalog()
    markup = InlineKeyboardMarkup()
    for category in catalog.keys():
        markup.add(InlineKeyboardButton(category, callback_data=f"category_{category}"))
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    if message_id:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=message_text,
            reply_markup=markup
        )
    else:
        bot.send_message(user_id, message_text, reply_markup=markup)
def send_products_in_category(user_id, category, message_id=None):
    catalog = get_catalog()
    products = catalog.get(category, [])
    if not products:
        bot.send_message(user_id, "–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    message = f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *{category}*:\n"
    markup = InlineKeyboardMarkup(row_width=1)
    for product in products:
        product_name = product['product_name']
        price = product['price']
        stock = product['stock']

        message += f"- {product_name} (–¶–µ–Ω–∞: {price}, –û—Å—Ç–∞—Ç–æ–∫: {stock})\n"
        markup.add(InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å {product_name}", callback_data=f"buy_{product_name}"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories"))

    if message_id:
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=message,
            reply_markup=markup,
            parse_mode="Markdown"
        )
    else:
        bot.send_message(user_id, message, reply_markup=markup, parse_mode="Markdown")

def normalize_product_name(name):
    return translit(name, reversed=True).lower() 

def analyze_query_nltk(user_input):
    words = word_tokenize(user_input.lower())  
    items = []
    current_quantity = None
    product_parts = []

    for word in words:
        if word.isdigit():  
            if current_quantity and product_parts:
                product_name = " ".join(product_parts).strip()
                items.append({"quantity": current_quantity, "product": product_name})
                product_parts = []  
            current_quantity = int(word)  
        else:
            product_parts.append(word)  

    if current_quantity and product_parts:
        product_name = " ".join(product_parts).strip()
        items.append({"quantity": current_quantity, "product": product_name})

    return items

def check_availability(extracted_items):
    available_items = []
    unavailable_items = []
    product_list = [normalize_product_name(row['product_name']) for row in product_data]
    for item in extracted_items:
        normalized_input = normalize_product_name(item["product"])
        best_match, score, *_ = process.extractOne(normalized_input, product_list)
        if score >= 70:  # –£—Å–ª–æ–≤–∏–µ: –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ >= 70%
            # –ù–∞–π–¥—ë–º –ø—Ä–æ–¥—É–∫—Ç –≤ product_data
            best_match_name = product_data[product_list.index(best_match)]['product_name']
            product_info = next((p for p in product_data if p['product_name'] == best_match_name), None)
            if product_info:
                if product_info['stock'] >= item["quantity"]:
                    available_items.append({
                        "product": best_match_name,
                        "quantity": item["quantity"],
                        "price": product_info['price']
                    })
                else:
                    unavailable_items.append(
                        f"{item['product']} (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {product_info['stock']})"
                    )
        else:
            unavailable_items.append(item["product"])
    return available_items, unavailable_items
user_cart = {}
user_cart_message = {}
def add_to_cart(user_id, item):
    if user_id not in user_cart:
        user_cart[user_id] = []
    existing_item = next((i for i in user_cart[user_id] if i['product'] == item['product']), None)
    product_info = next((p for p in product_data if p['product_name'] == item['product']), None)
    if not product_info:
        return False  
    available_stock = product_info['stock']
    if existing_item:
        if existing_item['quantity'] + item['quantity'] > available_stock:
            return False  # –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å
        existing_item['quantity'] += item['quantity']
    else:
        if item['quantity'] > available_stock:
            return False  # –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å
        user_cart[user_id].append(item)
    return True

def calculate_cart(user_id):
    cart = user_cart.get(user_id, [])
    total = 0
    details = []
    for item in cart:
        price = item['price'].replace('‚ÇΩ', '').replace(' ', '').strip()
        
        try:
            price = int(price)
        except ValueError:
            price = 0
        
        total += price * item['quantity']
        details.append(f"{item['quantity']} x {item['product']} (–¶–µ–Ω–∞: {price} ‚ÇΩ)")
    
    return total, details

def remove_from_cart(user_id, product_name):
    if user_id in user_cart:
        user_cart[user_id] = [item for item in user_cart[user_id] if item['product'] != product_name]
        return True
    return False

def clear_cart(user_id):
    if user_id in user_cart:
        user_cart[user_id] = []
        return True
    return False

def update_stock(product_name, quantity):
    for row_idx, row in enumerate(rows[1:], start=2):
        if row[0].strip().lower() == product_name:
            stock = int(row[1]) - quantity
            sheet.update_cell(row_idx, 2, max(0, stock))
            return

def process_quantity(message, product_name):

    user_id = message.chat.id
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

        product_info = next((p for p in product_data if p['product_name'] == product_name), None)
        if product_info and product_info['stock'] >= quantity:
            item = {
                "product": product_name,
                "quantity": quantity,
                "price": product_info['price']
            }
            add_to_cart(user_id, item)

            if user_id in user_cart_message:
                send_cart_buttons(user_id, user_cart_message[user_id])
            else:
                msg = bot.send_message(user_id, "üì¶ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:")
                user_cart_message[user_id] = msg.message_id
                send_cart_buttons(user_id, msg.message_id)

            bot.send_message(user_id, f"‚úÖ {quantity} —à—Ç. '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        else:
            bot.send_message(user_id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ '{product_name}' –Ω–∞ —Å–∫–ª–∞–¥–µ.")
    except ValueError:
        bot.send_message(user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")

def send_cart_buttons(user_id, message_id=None):

    cart = user_cart.get(user_id, [])
    if not cart:
        bot.edit_message_text(
            chat_id=user_id, 
            message_id=message_id, 
            text="‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
            reply_markup=None
        )
        return

    total, details = calculate_cart(user_id)
    order_details = "\n".join(details)
    message_text = f"üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n{order_details}\n\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"

    markup = InlineKeyboardMarkup(row_width=1)

    for item in cart:
        product_name = item['product']
        markup.add(InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {product_name}", callback_data=f"remove_{product_name}"))

    markup.add(
        InlineKeyboardButton("üõí‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"),
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    )

    if message_id:
        bot.edit_message_text(
            chat_id=user_id, 
            message_id=message_id, 
            text=message_text, 
            reply_markup=markup
        )
    else:
        bot.send_message(user_id, message_text, reply_markup=markup)


#–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –≤ –ª–∏—á–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
def notify_manager(user_id, username, order_details, total):
    manager_ids = [434412508,]  # –ß–∞—Ç ID –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ê—Ä—Ç—É—Ä - 673456311 , –í–∞–¥–∏–º - 434412508
    contact_info = f"@{username}" if username else f"ID: {user_id}"
    
    for manager_id in manager_ids:
        try:
            bot.send_message(
                manager_id,
                f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {contact_info}:\n{order_details}\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
            )
        except telebot.apihelper.ApiTelegramException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞ -------------------------------------------------------------------------
#------------------------------------------------------------------------------------------

@bot.message_handler(commands=['start'])
def handle_start(message):

    user_id = message.chat.id
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ö–Ω–æ–ø–∫–æ–π —Å–Ω–∏–∑—É –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞! –ù–∞–ø—Ä–∏–º–µ—Ä 4 –∫–∞—Å—Ç—ã —Å–º–æ—Ä–æ–¥–∏–Ω–∞")
    send_main_menu(user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def handle_category_selection(call):

    category = call.data.split("_", 1)[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    send_products_in_category(call.message.chat.id, category, message_id=call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_categories")
def handle_back_to_categories(call):

    send_categories(call.message.chat.id, message_id=call.message.message_id)

@bot.message_handler(func=lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
def handle_cart_button(message):

    user_id = message.chat.id
    if user_id not in user_cart or not user_cart[user_id]:
        bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    total, details = calculate_cart(user_id)
    order_details = "\n".join(details)
    message_text = f"üì¶ –í–∞—à –∑–∞–∫–∞–∑:\n{order_details}\n\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"

    markup = InlineKeyboardMarkup(row_width=1)
    for item in user_cart[user_id]:
        product_name = item['product']
        markup.add(InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {product_name}", callback_data=f"remove_{product_name}"))
    markup.add(
        InlineKeyboardButton("üõí‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"),
        InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    bot.send_message(user_id, message_text, reply_markup=markup)

@bot.message_handler(commands=['catalog'])
def show_catalog(message):
    send_categories(message.chat.id)

@bot.message_handler(func=lambda message: "üìö –∫–∞—Ç–∞–ª–æ–≥" in message.text.lower())
def handle_catalog_button(message):
    show_catalog(message)
    
@bot.message_handler(func=lambda message: True)
def process_order(message):
    user_input = message.text
    user_id = message.chat.id
    extracted_items = analyze_query_nltk(user_input)
    available_items, unavailable_items = check_availability(extracted_items)
    for item in available_items:
        add_to_cart(user_id, item)
    if available_items:
        total, details = calculate_cart(user_id)
        order_details = "\n".join(details)
        send_cart_buttons(user_id)
    else:
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã: " + ", ".join(unavailable_items))
        if unavailable_items:
            bot.send_message(user_id, "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n" + "\n".join([f"{item} (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)" for item in unavailable_items]))

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data == "confirm_order")
def handle_confirm_order(call):

    user_id = call.message.chat.id
    username = call.from_user.username

    if user_id not in user_cart or not user_cart[user_id]:
        bot.answer_callback_query(call.id, "‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return

    total, details = calculate_cart(user_id)
    order_details = "\n".join(details)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
    for item in user_cart[user_id]:
        update_stock(item['product'], item['quantity'])

    clear_cart(user_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.edit_message_text(
        chat_id=user_id,
        message_id=call.message.message_id,
        text=f"‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n\n{order_details}\n–ò—Ç–æ–≥–æ: {total} ‚ÇΩ"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    notify_manager(user_id, username, order_details, total)

    send_main_menu(user_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("remove_"))
def handle_remove_item(call):
    user_id = call.message.chat.id
    product_name = call.data.split("remove_", 1)[1]

    if remove_from_cart(user_id, product_name):
        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä '{product_name}' —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        send_cart_buttons(user_id, call.message.message_id)
    else:
        bot.answer_callback_query(call.id, f"–¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def handle_buy_product(call):
    user_id = call.message.chat.id
    product_name = call.data.split("buy_", 1)[1]

    product_info = next((p for p in product_data if p['product_name'] == product_name), None)
    if not product_info:
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    msg = bot.send_message(user_id, f"–°–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü '{product_name}' –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?")
    bot.register_next_step_handler(msg, process_quantity, product_name)
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "clear_cart")
def handle_clear_cart(call):
    user_id = call.message.chat.id
    if clear_cart(user_id):
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

        if user_id in user_cart_message:
            bot.edit_message_text(
                chat_id=user_id,
                message_id=user_cart_message[user_id],
                text="‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
                reply_markup=None
            )
            del user_cart_message[user_id]
    else:
        bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.")


bot.polling()
